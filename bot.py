import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from dateutil import parser
import pytz
import asyncio

TOKEN = '7912815635:AAGdKqihiMsKEe8VSNBL-3OUw70iwQs7CVY'
CHAT_ID = '-1002644568185'
moscow_tz = pytz.timezone('Europe/Moscow')


def get_warface_tournaments():
    url = 'https://pvp.vkplay.ru/api/tournaments?game=warface&status=active'
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")
        return []


async def send_daily_tournaments(context: ContextTypes.DEFAULT_TYPE):
    tournaments = get_warface_tournaments()
    if tournaments:
        message = "üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ Warface:\n\n"
        for t in tournaments:
            message += f"üèÜ {t['title']}\nüîó {t['url']}\n\n"
    else:
        message = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ Warface."
    await context.bot.send_message(chat_id=CHAT_ID, text=message)


async def notify_before_registration_end(context: ContextTypes.DEFAULT_TYPE):
    tournaments = get_warface_tournaments()
    now = datetime.now(pytz.utc)
    for t in tournaments:
        try:
            reg_end = parser.isoparse(t['registration_end_time']).astimezone(pytz.utc)
            if timedelta(hours=0) < reg_end - now <= timedelta(hours=1):
                message = f"‚è∞ –û—Å—Ç–∞–ª—Å—è 1 —á–∞—Å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\nüèÜ {t['title']}\nüîó {t['url']}"
                await context.bot.send_message(chat_id=CHAT_ID, text=message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")


# üëã –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Warface-–±–æ—Ç. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö üòâ")


async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start
    app.add_handler(CommandHandler("start", start_handler))

    # üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone=moscow_tz)
    scheduler.add_job(send_daily_tournaments, 'cron', hour=13, minute=0)
    scheduler.add_job(notify_before_registration_end, 'interval', minutes=30)
    scheduler.start()

    # üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∏–Ω—Ñ—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    await send_daily_tournaments(ContextTypes.DEFAULT_TYPE(bot=app.bot, application=app, job=None))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()


asyncio.run(main())